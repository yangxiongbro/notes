#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # 使用本地 127.0.0.1 上的 rsyslog 服务器中的 local0 设备记录，日志等级为 info
    # error warring info debug
    # local0 为 rsyslog 日志设备，默认存放到系统日志
    log 127.0.0.1 local0 info
    # 最大连接数，默认4000
    maxconn 5120
    # 改变当前工作目录
    chroot /opt/apps/haproxy
    # 默认用户，也可以使用 uid
    user haproxy
    # 默认组，也可以使用 gid
    group apps
    # 创建1个进程进入deamon模式运行。此参数要求将运行模式设置为daemon
    daemon
    # quiet
    # 设置 haproxy 的负载均衡并发进程数。(已废弃)
    # 由于受到许多限制，“nbproc”指令现在被弃用并计划在 haproxy 2.5版本中移除。
    # 可以使用 nbthread 指令指定线程数量，运行在所有分配的处理器上。
    # nbproc 20
    # haproxy的 pid 存放路径,启动进程的用户必须有权限访问此文件
    pidfile /opt/temp/haproxy/haproxy.pid
    # 创建监控所用的套接字目录
    stats socket /opt/temp/haproxy/stats
#---------------------------------------------------------------------
# defaults settings
#---------------------------------------------------------------------
defaults
    # 应用全局的日志设置
    log global
    # 使用4层代理模式，”mode http”为7层代理模式
    mode tcp
    # if you set mode to tcp,then you nust change tcplog into httplog
    option tcplog
    # 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器
    option dontlognull
    # serverId对应的服务器挂掉后,强制定向到其他健康的服务器
    option redispatch
    # 3次连接失败就认为服务不可用，也可以通过后面设置
    retries 3
    # 最大连接数
    maxconn 3000
    # 连接超时时间
    # contimeout 10s 2.1 之后不在支持该参数
    timeout connect 10s
    # 客户端空闲超时时间为 60秒 则HA 发起重连机制
    # clitimeout 60s 2.1 之后不在支持该参数
    timeout client 1m
    # 服务器端链接超时时间为 15秒 则HA 发起重连机制
    # srvtimeout 15s 2.1 之后不在支持该参数
    timeout server 1m
    # 心跳检查超时时间
    timeout check 10s
#---------------------------------------------------------------------
# listen status
#---------------------------------------------------------------------
# 配置 haproxy web 监控，查看统计信息
listen status
    bind 0.0.0.0:9188
    mode http
    option httplog
    stats enable
    stats refresh 10s
    # 设置haproxy监控地址为http://localhost:9188/stats
    stats uri /stats 
    # 添加用户名密码认证
    stats auth admin:123456 
    stats realm (Haproxy\ statistic)
    stats admin if TRUE

# 监听 nacos_dashbord
listen nacos_dashbord
    bind 0.0.0.0:10668
    mode http
    option httplog
    server server-101 192.168.31.101:8840
    server server-102 192.168.31.102:8840
    server server-103 192.168.31.103:8840
# 监听 seata_dashboard
listen seata_dashboard
    bind 0.0.0.0:10494
    mode http
    option httplog
    server server-101 192.168.31.101:7090
    server server-102 192.168.31.102:7090
    server server-103 192.168.31.103:7090
# 监听 elasticsearch_http
listen elasticsearch_http
    bind 0.0.0.0:10431
    mode http
    option httplog
    server server-101 192.168.31.101:9200
    server server-102 192.168.31.102:9200
    server server-103 192.168.31.103:9200
# 监听 rabbitmq_management
listen rabbitmq_management
    bind 0.0.0.0:10575
    mode http
    option httplog
    server server-101 192.168.31.101:15672
    server server-102 192.168.31.102:15672
    server server-103 192.168.31.103:15672
# 监听 zipkin_dashboard
listen zipkin_dashboard
    bind 0.0.0.0:10527
    mode http
    option httplog
    server server-101 192.168.31.101:9411
    server server-102 192.168.31.102:9411
    server server-103 192.168.31.103:9411
# 监听 nacos_grpc_client
listen nacos_grpc_client
    bind 0.0.0.0:10709
    mode tcp
    option tcplog
    # 负载均衡算法
    # 表示简单的轮询，每个服务器根据权重轮流使用，在服务器的处理时间平均分配的情况下这是最流畅和公平的算法。该算法是动态的，对于实例启动慢的服务器权重会在运行中调整。最大支持4095个后端主机；
    balance roundrobin
    #
    # 连接数最少的服务器优先接收连接。leastconn建议用于长会话服务，例如LDAP、SQL、TSE等，而不适合短会话协议。如HTTP.该算法是动态的，对于实例启动慢的服务器权重会在运行中调整。
    # leastconn
    #
    # 每个服务器根据权重轮流使用，类似roundrobin，但它是静态的，意味着运行时修改权限是无效的。另外，它对服务器的数量没有限制。该算法一般不用；
    # static-rr
    #
    # 对请求源IP地址进行哈希，用可用服务器的权重总数除以哈希值，根据结果进行分配。
    # 只要服务器正常，同一个客户端IP地址总是访问同一个服务器。如果哈希的结果随可用服务器数量而变化，那么客户端会定向到不同的服务器；该算法一般用于不能插入cookie的Tcp模式。
    # 它还可以用于广域网上为拒绝使用会话cookie的客户端提供最有效的粘连；该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“hash-type”的变化做调整。
    # source
    #
    # 表示根据请求的URI左端（问号之前）进行哈希，用可用服务器的权重总数除以哈希值，根据结果进行分配。
    # 只要服务器正常，同一个URI地址总是访问同一个服务器。一般用于代理缓存和反病毒代理，以最大限度的提高缓存的命中率。
    # 该算法只能用于HTTP后端；该算法一般用于后端是缓存服务器；该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“hash-type”的变化做调整。
    # uri
    #
    # 在HTTP GET请求的查询串中查找<param>中指定的URL参数，基本上可以锁定使用特制的URL到特定的负载均衡器节点的要求；
    # 该算法一般用于将同一个用户的信息发送到同一个后端服务器；该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“hash-type”的变化做调整。
    # url_param
    #
    # 在每个HTTP请求中查找HTTP头<name>，HTTP头<name>将被看作在每个HTTP请求，并针对特定的节点；如果缺少头或者头没有任何值，则用roundrobin代替；
    # 该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“hash-type”的变化做调整。
    # hdr(name)
    #
    # 为每个进来的TCP请求查询并哈希RDP cookie<name>；该机制用于退化的持久模式，可以使同一个用户或者同一个会话ID总是发送给同一台服务器。
    # 如果没有cookie，则使用roundrobin算法代替；该算法默认是静态的，所以运行时修改服务器的权重是无效的，但是算法会根据“hash-type”的变化做调整。
    # balance rdp-cookie(name)
    
    # check inter 5000 每隔五秒对集群做健康检查
    # rise 3 是 3 次正确认为服务器可用
    # fall 3 是 3 次失败认为服务器不可用
    server server-101 192.168.31.101:9840 check inter 5000 rise 3 fall 3
    server server-102 192.168.31.102:9840 check inter 5000 rise 3 fall 3
    server server-103 192.168.31.103:9840 check inter 5000 rise 3 fall 3
# 监听 nacos_grpc_server
listen nacos_grpc_server
    bind 0.0.0.0:10720
    mode tcp
    option tcplog
    balance roundrobin
    server server-101 192.168.31.101:9841 check inter 5000 rise 3 fall 3
    server server-102 192.168.31.102:9841 check inter 5000 rise 3 fall 3
    server server-103 192.168.31.103:9841 check inter 5000 rise 3 fall 3
# 监听 seata_server
listen seata_server
    bind 0.0.0.0:10535
    mode tcp
    option tcplog
    balance roundrobin
    server server-101 192.168.31.101:8090 check inter 5000 rise 3 fall 3
    server server-102 192.168.31.102:8090 check inter 5000 rise 3 fall 3
    server server-103 192.168.31.103:8090 check inter 5000 rise 3 fall 3
# 监听 elasticsearch_tcp
listen elasticsearch_tcp
    bind 0.0.0.0:10462
    mode tcp
    option tcplog
    balance roundrobin
    server server-101 192.168.31.101:9300 check inter 5000 rise 3 fall 3
    server server-102 192.168.31.102:9300 check inter 5000 rise 3 fall 3
    server server-103 192.168.31.103:9300 check inter 5000 rise 3 fall 3
# 监听 rabbitmq_amqp_without_tls
listen rabbitmq_amqp_without_tls
    bind 0.0.0.0:10574
    mode tcp
    option tcplog
    balance roundrobin
    server server-101 192.168.31.101:5672 check inter 5000 rise 3 fall 3
    server server-102 192.168.31.102:5672 check inter 5000 rise 3 fall 3
    server server-103 192.168.31.103:5672 check inter 5000 rise 3 fall 3
# 监听 rabbitmq_amqp_with_tls
listen rabbitmq_amqp_with_tls
    bind 0.0.0.0:10563
    mode tcp
    option tcplog
    balance roundrobin
    server server-101 192.168.31.101:5671 check inter 5000 rise 3 fall 3
    server server-102 192.168.31.102:5671 check inter 5000 rise 3 fall 3
    server server-103 192.168.31.103:5671 check inter 5000 rise 3 fall 3

